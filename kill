#!/bin/bash

# Instalação de Dependências
echo "Instalando as dependências..."
sudo apt update
sudo apt install python3 python3-pip -y
pip3 install psutil

# Criação do Script de Monitoramento
echo "Criando o script de monitoramento..."
cat << EOF > monitor.py
import psutil
import time
import datetime
import os

def monitor_and_restart_processes(threshold_percent, interval=60, max_processes=3):
    while True:
        # Obtém uma lista de todos os processos em execução ordenados por uso de CPU
        all_processes = sorted(psutil.process_iter(['pid', 'name', 'cpu_percent']), key=lambda p: p.info['cpu_percent'], reverse=True)

        # Seleciona os três primeiros processos com maior uso de CPU
        selected_processes = all_processes[:max_processes]

        # Verifica o uso de CPU de cada processo selecionado
        for process in selected_processes:
            current_cpu_percent = process.info['cpu_percent']
            print(f"Processo {process.info['name']} (PID: {process.info['pid']}) está consumindo {current_cpu_percent}% de CPU.")
            if current_cpu_percent > threshold_percent:
                print(f"Excedeu o limite de uso de CPU de {threshold_percent}%.")
                print(f"Reiniciando o processo {process.info['name']}...")
                with open("monitor_log.txt", "a") as log_file:
                    log_file.write(f"{datetime.datetime.now()} - Processo {process.info['name']} (PID: {process.info['pid']}) reiniciado devido a alto uso de CPU ({current_cpu_percent}%).\n")
                try:
                    os.kill(process.info['pid'], 9)  # Envia sinal SIGKILL (9) para o processo
                    print(f"Processo reiniciado com sucesso.")
                except Exception as e:
                    print(f"Erro ao tentar reiniciar o processo {process.info['name']}: {e}")

        # Aguarda o intervalo especificado antes de verificar novamente
        time.sleep(interval)

# Define o limite percentual de uso de CPU para reiniciar os processos (padrão: 95)
threshold_percent = 95

# Inicia o monitoramento e reinício dos processos
monitor_and_restart_processes(threshold_percent)

EOF

# Permissões de Execução
chmod +x monitor.py

# Remover a tarefa cron existente
echo "Removendo a tarefa cron existente..."
(crontab -l 2>/dev/null | grep -v "monitor.py" | crontab -) || true

# Criar o arquivo de serviço do systemd
echo "Criando o arquivo de serviço do systemd..."
cat << EOF > /etc/systemd/system/monitor.service
[Unit]
Description=Monitor Service
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/python3 $PWD/monitor.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# Recarregar o daemon do systemd
echo "Recarregando o daemon do systemd..."
sudo systemctl daemon-reload

# Iniciar o serviço do monitor
echo "Iniciando o serviço do monitor..."
sudo systemctl start monitor.service

# Habilitar o serviço para iniciar na inicialização
echo "Habilitando o serviço para iniciar na inicialização..."
sudo systemctl enable monitor.service

echo "Instalação e configuração concluídas com sucesso!"
